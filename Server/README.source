## Server 

this component implements the Q server. 

The server signs up clients over TCP that connect on behalf of an AI
player and runs a Q game. 

A server configuration file has the following shape:

```
(define options
  (list
    PORT            ;; on which port the clients may connect 
    SERVER-WAIT     ;; the length [in s] of the sign-up period 
    SERVER-TRIES    ;; how many serving periods it waits 
    WAIT-FOR-SIGNUP ;; the number of s a client has to deliver a name
    QUIET           ;; suppress error message? 
    REF-SPEC))      ;; referee-specific configuration 
```

In addition to a configuratoon, a server requires two other mandatory
arguments:

- an `ordering`, which determines the order in which players get to go
- a list of house `players`, locally running players

plus one optional keyword argument (`#:result`), which accepts the
list of players and optionally displays them (or processes them in
other ways). The default is `void`.

Every client that connects gets represented by a remote-proxy player,
which satisfies the exact same interface as an ordinary player. Once
enough clients have signed up, the server delegates the task of
running the game to a referee. The results---the winning players and
those that misbehaved---are handed to the `#:result` function.

### The Sign-Up Protocol

The following sequence diagram sketches how clients sign up, how the
server wraps them in proxies, and how it eventually delegates to the
referee. 

@@include(../Common/remote-protocol-connect.txt)

### Running

The `xserver` script ... 

### Organization 
