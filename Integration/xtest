#! /bin/sh
#! ./xtest Tests/ ./xclients ,/xserver launches a server locally on a port, points n clients there, with tests creates from configs
#| -*- racket -*-
exec racket -W error -tm "$0" -- ${1+"$@"}
|#
#lang racket

(provide main)

;; ---------------------------------------------------------------------------------------------------
(require SwDev/Testing/harness)
(require json)

;; ---------------------------------------------------------------------------------------------------
(test-plain-and-pretty-json?             #f)
(test-fast-and-slow-delivery?            #f)
(test-with-and-without-trailing-newline? #f)
(test-with-and-without-escaped-unicode?  #f)

;; Send all inputs first before looking for output
(test-with-batch-mode?                   #t)

;; Give the server this much time to wait 2 x 20s (see config in `run-server`)
;; and to play the entire tournament. 
(unset-time-out #:limit 200) ;; in s

(define (main path-to-test-directory path-to-xclient path-to-xserver)

  ;; needs clarification concerning write-access to `path-to-test-directory`
  (define [ps n] (= n 0))
  (define [pc n] (or (= n 1) (= n 2)))
  (define ck (λ (x) x) #;[check ab prep relax-name])
  (define tester (client-and-server #:check ck #:prepare-client pc #:prepare-server ps))
  (dynamic-wind
   (λ () (create-inputs path-to-test-directory))
   (λ () [tester path-to-test-directory path-to-xclient path-to-xserver])
   (λ () (delete-inputs path-to-test-directory))))

#; {PathString -> Void}
;; create the *-in files for all pairs of n-client-config.json and n-server-config.json files
(define (create-inputs path-to-test-directory)
  (parameterize ([current-directory path-to-test-directory])
    (for ([i (in-naturals)] [_ (in-directory)])
      (match-define [list client-config.json server-config.json in.json] (file-names i))
      (when (and (file-exists? client-config.json) (file-exists? server-config.json))
        (append-files server-config.json client-config.json in.json #:exists-ok? #true)))))

#; {PathString PathString PathString [#:exists-ok? Boolean] -> Void}
;; concatenate from-1 from-2 target
(define (append-files from-1 from-2 target #:exists-ok? [eok? #f])
  (copy-file from-1 target #:exists-ok? eok?)
  (define sc (file->lines from-2))
  (with-output-to-file target #:exists 'append (λ () (display-lines (file->lines from-2)))))

#; {Natural -> [List String String]}
(define (file-names i)
  [list (~a i "-client-config.json") (~a i "-server-config.json") (~a i "-in.json")])

#; {PathString -> Void}
;; create the *-in files for all pairs of n-client-config.json and n-server-config.json files
(define (delete-inputs path-to-test-directory)
  (parameterize ([current-directory path-to-test-directory])
    (for* ([f (in-directory)] [g (in-value (path->string f))] #:when (regexp-match #px"-in.json" g))
      (delete-file g))))

;; ---------------------------------------------------------------------------------------------------
(module+ test
  (create-inputs "Tmp/"))
